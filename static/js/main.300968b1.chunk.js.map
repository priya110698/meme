{"version":3,"sources":["components/header.js","components/meme.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Meme","texts","eve","target","name","value","type","setState","formSubmittion","e","preventDefault","randoimg","Math","floor","random","state","dataApi","length","randommeme","url","memeImg","topText","bottomText","fetch","then","res","json","datum","memes","data","console","log","onSubmit","this","onChange","src","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.300968b1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Header extends React.Component {\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"memeHeader\">\r\n               Meme Generator\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Meme extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            topText : \"\",\r\n            bottomText : \"\",\r\n            memeImg : \"https://i.pinimg.com/originals/84/71/5e/84715e708117f39ef4e8746b29ce1441.jpg\",\r\n            dataApi : []\r\n        }\r\n    }\r\n\r\n  componentDidMount() {\r\n      fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(res => res.json())\r\n      .then( datum => {\r\n          const {memes} = datum.data\r\n          console.log(memes[0]);\r\n          this.setState({\r\n            dataApi : memes  \r\n          })\r\n        }\r\n      )\r\n  }\r\n\r\n\r\n\r\n texts = (eve) => {\r\n     const {name,type,value} = eve.target;\r\n     this.setState({\r\n        [name] : value\r\n     })\r\n }\r\n\r\n formSubmittion = (e) => {\r\n     e.preventDefault();\r\n     const randoimg = Math.floor(Math.random() * this.state.dataApi.length);\r\n     const randommeme = this.state.dataApi[randoimg].url\r\n     this.setState({\r\n        memeImg : randommeme\r\n     })\r\n }\r\n  \r\n    render(){\r\n        return(\r\n            <div className=\"memeRoot\">\r\n               <form onSubmit={this.formSubmittion} className=\"formSection\" >\r\n                <div className=\"flex\">\r\n                 <div className=\"divSections\">\r\n                   <label>Top Text</label>\r\n                   <input type=\"text\" name=\"topText\" onChange={this.texts} />\r\n                 </div>\r\n                   \r\n                 <div className=\"divSections\">\r\n                   <label>Bottom Text</label>\r\n                   <input type=\"text\" name=\"bottomText\" onChange={this.texts} />\r\n                 </div>\r\n                 </div>\r\n                   <br />\r\n                   <button className=\"btn btn-info\">Change Image</button>\r\n               </form>\r\n\r\n               <div className=\"meme\">\r\n                   <h4 className=\"top\">{this.state.topText}</h4>\r\n                   <img src={this.state.memeImg} />\r\n                   <h4 className=\"bottom\">{this.state.bottomText}</h4>\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Meme;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Meme from './components/meme';\n\nclass App extends React.Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <Header />\n      <Meme />\n    </div>\n  );\n}\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}